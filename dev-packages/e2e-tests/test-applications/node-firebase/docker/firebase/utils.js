const fs = require('fs');
const path = require('path');

const firebaseToolsFileName = 'firebase-tools.json';
const updateNotifierFirebaseToolsFileName = 'update-notifier-firebase-tools.json';

function createJsonFile(filePath, json) {
  return new Promise((resolve, reject) => {
    let content = JSON.stringify(json, null, 2);

    // replace spaces with tabs
    content = content.replace(/[ ]{2}/g, '\t');

    fs.mkdirSync(filePath.substring(0, filePath.lastIndexOf('/')), { recursive: true });
    fs.writeFile(filePath, content, function (err) {
      if (err) {
        reject(err);
      } else {
        resolve();
      }
    });
  });
}

function createEnvironmentFile(filePath, content) {
  return new Promise((resolve, reject) => {
    fs.writeFile(filePath, content, function (err) {
      if (err) {
        reject(err);
      } else {
        resolve();
      }
    });
  });
}

function readJsonFromFile(filePath) {
  return new Promise((resolve, reject) => {
    fs.readFile(filePath, 'utf8', (err, data) => {
      if (err) {
        reject(err);
        return;
      }
      try {
        resolve(JSON.parse(data));
      } catch (err) {
        reject(err);
        console.error(err);
      }
    });
  });
}

/**
 * Creates firebase configuration based on .env file
 */
async function createConfigFromEnv() {
  const dockerPath = path.resolve(__dirname, '..');
  const configPath = path.resolve(dockerPath, '.config/configstore');

  let filePathFirebaseTools = process.env.CONFIG_FIREBASE_TOOLS;
  let filePathUpdateNotifierFirebaseTools = process.env.CONFIG_UPDATE_NOTIFIER_FIREBASE_TOOLS;

  if (typeof filePathFirebaseTools !== 'string') {
    throw new Error('no CONFIG_FIREBASE_TOOLS environment');
  }
  if (typeof filePathUpdateNotifierFirebaseTools !== 'string') {
    throw new Error('no CONFIG_UPDATE_NOTIFIER_FIREBASE_TOOLS environment');
  }

  try {
    filePathFirebaseTools = JSON.parse(filePathFirebaseTools);
    filePathUpdateNotifierFirebaseTools = JSON.parse(filePathUpdateNotifierFirebaseTools);

    await Promise.all([
      createJsonFile(path.resolve(configPath, firebaseToolsFileName), filePathFirebaseTools),
      createJsonFile(
        path.resolve(configPath, updateNotifierFirebaseToolsFileName),
        filePathUpdateNotifierFirebaseTools,
      ),
    ]);
    console.log('firebase config based on environment variables created successfully');
  } catch (e) {
    console.error('firebase config creation error', e);
  }
}

/**
 * Creates file .env based on firebase configuration
 */
async function createEnvFromConfig() {
  const dockerPath = path.resolve(__dirname, '..');
  const configPath = path.resolve(dockerPath, '.config/configstore');
  const dockerFilePath = path.resolve(dockerPath, '.env');
  try {
    const results = await Promise.all([
      readJsonFromFile(path.resolve(configPath, firebaseToolsFileName)),
      readJsonFromFile(path.resolve(configPath, updateNotifierFirebaseToolsFileName)),
    ]);
    const filePathFirebaseTools = results[0];
    const filePathUpdateNotifierFirebaseTools = results[1];

    if (!filePathFirebaseTools) {
      throw new Error('Environment variable ');
    }

    const content = [];
    content.push('# This is autogenerated');
    content.push(`CONFIG_FIREBASE_TOOLS=${JSON.stringify(filePathFirebaseTools)}`);
    content.push(`CONFIG_UPDATE_NOTIFIER_FIREBASE_TOOLS=${JSON.stringify(filePathUpdateNotifierFirebaseTools)}`);
    content.push('');
    await createEnvironmentFile(dockerFilePath, content.join('\n'));

    console.log(`environments variables saved in "${dockerFilePath}" based on firebase config`);
  } catch (e) {
    console.error(e);
  }
}

/**
 * Creates or update the existing config whenever environment is defined. This is used by docker and will recreate
 * the config each time the docker is run as long as the environment settings exist.
 */
function createOrUpdateConfigIfPossible() {
  const filePathFirebaseTools = process.env.CONFIG_FIREBASE_TOOLS;
  const filePathUpdateNotifierFirebaseTools = process.env.CONFIG_UPDATE_NOTIFIER_FIREBASE_TOOLS;
  if (
    typeof filePathFirebaseTools === 'string' &&
    typeof filePathUpdateNotifierFirebaseTools === 'string' &&
    filePathFirebaseTools !== '' &&
    filePathUpdateNotifierFirebaseTools !== ''
  ) {
    createConfigFromEnv();
  } else {
    console.error('>>>>>>>>>>>>>>>> WARNING <<<<<<<<<<<<<<<<<<<<<');
    console.error('firebase config creation failed due to missing environment variables');
    console.error('>>>>>>>>>>>>>>>> WARNING <<<<<<<<<<<<<<<<<<<<<');
  }
}

module.exports = {
  createEnvFromConfig: createEnvFromConfig,
  createConfigFromEnv: createConfigFromEnv,
  createOrUpdateConfigIfPossible: createOrUpdateConfigIfPossible,
};
