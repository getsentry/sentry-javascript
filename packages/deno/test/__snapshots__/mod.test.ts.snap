export const snapshot = {};

snapshot[`captureException 1`] = `
{
  contexts: {
    app: {
      app_start_time: "{{time}}",
    },
    device: {
      arch: "{{arch}}",
      processor_count: 0,
    },
    os: {
      name: "{{platform}}",
      version: "{{version}}",
    },
    runtime: {
      name: "deno",
      version: "{{version}}",
    },
    trace: {
      span_id: "{{id}}",
      trace_id: "{{id}}",
    },
    typescript: {
      name: "TypeScript",
      version: "{{version}}",
    },
    v8: {
      name: "v8",
      version: "{{version}}",
    },
  },
  environment: "production",
  event_id: "{{id}}",
  exception: {
    values: [
      {
        mechanism: {
          handled: true,
          type: "generic",
        },
        stacktrace: {
          frames: [
            {
              colno: 27,
              context_line: "  client.captureException(something());",
              filename: "app:///test/mod.test.ts",
              function: "?",
              in_app: true,
              lineno: 44,
              post_context: [
                "",
                "  await delay(200);",
                "  await assertSnapshot(t, ev);",
                "});",
                "",
                "Deno.test('captureMessage', async t => {",
                "  let ev: Event | undefined;",
              ],
              pre_context: [
                "    ev = event;",
                "  });",
                "",
                "  function something() {",
                "    return new Error('Some unhandled error');",
                "  }",
                "",
              ],
            },
            {
              colno: 12,
              context_line: "    return new Error('Some unhandled error');",
              filename: "app:///test/mod.test.ts",
              function: "something",
              in_app: true,
              lineno: 41,
              post_context: [
                "  }",
                "",
                "  client.captureException(something());",
                "",
                "  await delay(200);",
                "  await assertSnapshot(t, ev);",
                "});",
              ],
              pre_context: [
                "Deno.test('captureException', async t => {",
                "  let ev: Event | undefined;",
                "  const client = getTestClient(event => {",
                "    ev = event;",
                "  });",
                "",
                "  function something() {",
              ],
            },
          ],
        },
        type: "Error",
        value: "Some unhandled error",
      },
    ],
  },
  level: "error",
  platform: "javascript",
  sdk: {
    integrations: [
      "InboundFilters",
      "FunctionToString",
      "LinkedErrors",
      "Dedupe",
      "Breadcrumbs",
      "DenoContext",
      "ContextLines",
      "NormalizePaths",
      "GlobalHandlers",
    ],
    name: "sentry.javascript.deno",
    packages: [
      {
        name: "denoland:sentry",
        version: "{{version}}",
      },
    ],
    version: "{{version}}",
  },
  server_name: "{{server}}",
  timestamp: 0,
}
`;

snapshot[`captureMessage 1`] = `
{
  breadcrumbs: [
    {
      category: "sentry.event",
      event_id: "{{id}}",
      level: "error",
      message: "Error: Some unhandled error",
      timestamp: 0,
    },
  ],
  contexts: {
    app: {
      app_start_time: "{{time}}",
    },
    device: {
      arch: "{{arch}}",
      processor_count: 0,
    },
    os: {
      name: "{{platform}}",
      version: "{{version}}",
    },
    runtime: {
      name: "deno",
      version: "{{version}}",
    },
    trace: {
      span_id: "{{id}}",
      trace_id: "{{id}}",
    },
    typescript: {
      name: "TypeScript",
      version: "{{version}}",
    },
    v8: {
      name: "v8",
      version: "{{version}}",
    },
  },
  environment: "production",
  event_id: "{{id}}",
  level: "info",
  message: "Some error message",
  platform: "javascript",
  sdk: {
    integrations: [
      "InboundFilters",
      "FunctionToString",
      "LinkedErrors",
      "Dedupe",
      "Breadcrumbs",
      "DenoContext",
      "ContextLines",
      "NormalizePaths",
      "GlobalHandlers",
    ],
    name: "sentry.javascript.deno",
    packages: [
      {
        name: "denoland:sentry",
        version: "{{version}}",
      },
    ],
    version: "{{version}}",
  },
  server_name: "{{server}}",
  timestamp: 0,
}
`;

snapshot[`captureMessage twice 1`] = `
{
  breadcrumbs: [
    {
      category: "sentry.event",
      event_id: "{{id}}",
      level: "error",
      message: "Error: Some unhandled error",
      timestamp: 0,
    },
    {
      category: "sentry.event",
      event_id: "{{id}}",
      level: "info",
      message: "Some error message",
      timestamp: 0,
    },
  ],
  contexts: {
    app: {
      app_start_time: "{{time}}",
    },
    device: {
      arch: "{{arch}}",
      processor_count: 0,
    },
    os: {
      name: "{{platform}}",
      version: "{{version}}",
    },
    runtime: {
      name: "deno",
      version: "{{version}}",
    },
    trace: {
      span_id: "{{id}}",
      trace_id: "{{id}}",
    },
    typescript: {
      name: "TypeScript",
      version: "{{version}}",
    },
    v8: {
      name: "v8",
      version: "{{version}}",
    },
  },
  environment: "production",
  event_id: "{{id}}",
  level: "info",
  message: "Some error message",
  platform: "javascript",
  sdk: {
    integrations: [
      "InboundFilters",
      "FunctionToString",
      "LinkedErrors",
      "Dedupe",
      "Breadcrumbs",
      "DenoContext",
      "ContextLines",
      "NormalizePaths",
      "GlobalHandlers",
    ],
    name: "sentry.javascript.deno",
    packages: [
      {
        name: "denoland:sentry",
        version: "{{version}}",
      },
    ],
    version: "{{version}}",
  },
  server_name: "{{server}}",
  timestamp: 0,
}
`;

snapshot[`captureMessage twice 2`] = `
{
  breadcrumbs: [
    {
      category: "sentry.event",
      event_id: "{{id}}",
      level: "error",
      message: "Error: Some unhandled error",
      timestamp: 0,
    },
    {
      category: "sentry.event",
      event_id: "{{id}}",
      level: "info",
      message: "Some error message",
      timestamp: 0,
    },
    {
      category: "sentry.event",
      event_id: "{{id}}",
      level: "info",
      message: "Some error message",
      timestamp: 0,
    },
  ],
  contexts: {
    app: {
      app_start_time: "{{time}}",
    },
    device: {
      arch: "{{arch}}",
      processor_count: 0,
    },
    os: {
      name: "{{platform}}",
      version: "{{version}}",
    },
    runtime: {
      name: "deno",
      version: "{{version}}",
    },
    trace: {
      span_id: "{{id}}",
      trace_id: "{{id}}",
    },
    typescript: {
      name: "TypeScript",
      version: "{{version}}",
    },
    v8: {
      name: "v8",
      version: "{{version}}",
    },
  },
  environment: "production",
  event_id: "{{id}}",
  level: "info",
  message: "Another error message",
  platform: "javascript",
  sdk: {
    integrations: [
      "InboundFilters",
      "FunctionToString",
      "LinkedErrors",
      "Dedupe",
      "Breadcrumbs",
      "DenoContext",
      "ContextLines",
      "NormalizePaths",
      "GlobalHandlers",
    ],
    name: "sentry.javascript.deno",
    packages: [
      {
        name: "denoland:sentry",
        version: "{{version}}",
      },
    ],
    version: "{{version}}",
  },
  server_name: "{{server}}",
  timestamp: 0,
}
`;
