---
description: Use this rule if you are looking to upgrade a dependency in the Sentry JavaScript SDKs
globs:
alwaysApply: false
---
# Yarn v1 Dependency Upgrades

## Upgrade Process

### Dependency Analysis

```bash
# Check dependency tree
yarn list --depth=0

# Find why package is installed
yarn why [package-name]
```

### Root Workspace vs. Package Dependencies

- **Root Workspace dependencies**: Shared dev tools, build tools, testing frameworks
- **Package dependencies**: Package-specific runtime and dev dependencies
- Always check if dependency should be in root workspace or package level

### Upgrade Dependencies

ONLY ever upgrade a single package at a time.

If a dependency is not defined in `package.json` anywhere, the upgrade MUST be run in the root workspace as the `yarn.lock` file is contained there.

```bash
# Upgrade specific package to latest compatible version
npx yarn-update-dependency@latest [package-name]
```

Avoid upgrading top-level dependencies (defined in `package.json`), especially if they are used for tests. If you are going to upgrade them, ask the user before proceeding.

If a `package.json` file is updated, make sure it has a new line at the end.

#### e2e tests

For tests applications defined in `dev-packages/e2e-tests/test-applications`, if the test name explicitly mentions a dependency, DO NOT upgrade the major version of that dependency in the `test-applications` `package.json`. For example, DO NOT upgrade the nestjs version of `dev-packages/e2e-tests/test-applications/nestjs-8` to nestjs 9 or above because the test name mentions nestjs 8.

## Safety Protocols

### Pre-Upgrade Checklist

1. **Backup**: Ensure clean git state or create backup branch
2. **CI Status**: Ensure all tests are passing
3. **Lockfile works**: Ensure `yarn.lock` is in a good state (no merge conflicts)

### Post-Upgrade Verification

```bash
# rebuild everything
yarn install

# Build the project
yarn build:dev

# Make sure dependencies are deduplicated
yarn dedupe-deps:fix

# Fix any linting issues
yarn fix

# Check circular dependencies
yarn circularDepCheck
```

## Version Management

### Pinning Strategies

- **Exact versions** (`1.2.3`): For critical dependencies
- **Caret versions** (`^1.2.3`): Allow minor updates
- **Latest tag**: Avoid as much as possible other than in certain testing and development scenarios

## Troubleshooting

- Check current yarn version: `yarn --version`, always ensure you're using yarn v1 (not v2/v3/v4)
- Verify yarn.lock exists and is properly maintained. Fix merge conflicts by running `yarn install`.

## Security Considerations

### Security Audits

```bash
# Check for security vulnerabilities
yarn audit

# Fix automatically fixable vulnerabilities
yarn audit fix

# Install security patches only
yarn upgrade --security-only
```

### Check for Outdated Dependencies

```bash
# Check all outdated dependencies
yarn outdated

# Check specific package
yarn outdated [package-name]

# Check dependencies in specific workspace
yarn workspace [workspace-name] outdated
```

## Best Practices

### Documentation

- Update README or code comments if dependency change affects usage of the SDK or it's integrations.
- Notify team of significant changes
